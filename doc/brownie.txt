*brownie.txt* A template/snippet plugin.

Maintainer: mityu <mityu.email (at) gmail.com>
Lisence: the MIT License
The latest version: https://github.com/mityu/vim-brownie

==============================================================================
CONTENTS                                                  *brownie-contents*

FEATURES                      |brownie-features|
FUNCTIONS                     |brownie-functions|
VARIABLES                     |brownie-variables|
COLORS                        |brownie-colors|
HOOK                          |brownie-hook|
EXAMPLES                      |brownie-examples|
WRITE                         |brownie-write|


==============================================================================
FEATURES                                                *brownie-features*

A template/snippet plugin for Vim, strongly inspired by
mattn/sonictemplate-vim and thinca/vim-template.
This plugin provides following features:
- List templates/snippets
- Extract templates/snippets

NOTE that this plugin is UNDER DEVELOPMENT; ANYTHING MAY STILL CHANGE


==============================================================================
FUNCTIONS                                               *brownie-functions*

                                                    *brownie#list()*
brownie#list({filetype}, {kind})
    Return list of templates/snippets for {filetype}.
    {kind} is "template" or "snippet".
    Example: >
        " List templates for cpp.
        let templates = brownie#list('cpp', 'template')

        " List snippets for vimscript.
        let snippets = brownie#list('vim', 'snippet')
<

                                                    *brownie#extract()*
brownie#extract({filetype}, {kind}, {name})
    Extract a template/snippet named {name} for {filetype} on the cursor spot.
    Returns 1 if scceeded to extract; otherwise, returns 0.


                                            *brownie#is_buffer_empty()*
brownie#is_buffer_empty([{bufnr}])
    If buffer of {bufnr} is an empty buffer, returns 1; otherwise, returns 0.
    {bufnr} is evalated by |bufnr()|.  If {bufnr} isn't given, a returned
    value of |brownie#get_current_bufnr()| will be used.


                                            *brownie#get_current_bufnr()*
brownie#get_current_bufnr()
    Return current buffer number, but it works well even if you're in |cmdwin|.


-----------------------------------------------------------------------------
                                            *brownie-template-functions*
The following functions are available only in the template/snippet's script
section and |brownie-hook|.
NOTE: You shouldn't modify buffer via built-in functions or commands (e.g.
|:substitute|, |:global|, and |append()|) in scripts of the template/snippet
or on |brownie-hook|  because those changes may be thrown away.


                                                *brownie#replace()*
brownie#replace({expr}, {sub})
    Replace all {expr} strings in the template/snippet into {sub}.
    Note that this function is a wrapper of |substitute()| .

                                                *brownie#input()*
brownie#input({prompt} [, {text} [, {completion}]])
    Almost same as |input()|.  However, if |input()| is canceled (e.g. due to
    <C-c>), returns ""(an empty string).

                                                *brownie#highlight()*
brownie#highlight({pattern})
    Highlight {pattern} in the template/snippet.
    The color will be |BrowniePlaceHolder|.
    {pattern} is a regexp string. See |patterns|.


==============================================================================
VARIABLES                                               *brownie-variables*

                                            *g:brownie_snippets_directory*
g:brownie_snippets_directory
    |List| of |String| of directory(ies) to templates/snippets.

                                            *g:brownie_extra_imports*
g:brownie_extra_imports
    |Dictionary|.  Key is filetype, and value is a |List| of filetypes.
    Templates/Snippets of the filetypes are also listed when listing
    templates/snippets of the filetype.

                                                        *g:brownie#info*
g:brownie#info
    NOTE: NOT IMPLEMENTED YET!
    |Dictionary| and only be available in |brownie-hook|.
    The following are descriptoins of its fields.
    - kind
      "template" or "snippet".
    - location
      A |Dictionary| that has "begin" and "end" fields that specificates
      where the extracted snippet is.


==============================================================================
COLORS                                                  *brownie-colors*

BrowniePlaceHolder                                      *BrowniePlaceHolder*
    The color to highlight placeholders.
    In default, BrowniePlaceHolder is linked to TODO.

    Example: >
        " Display placeholders in italic.
        augroup vimrc-brownie-coloring
            autocmd!
            autocmd ColorScheme *
                \ highlight BrowniePlaceHolder term=italic gui=italic
        augroup END
<

==============================================================================
HOOK                                                   *brownie-hook*

|brownie.vim| triggers some |User| autocmds for hook in the following rule.

    `:autocmd User brownie-{kind}`

{kind} will be:
                                                     *brownie-extract-pre*
extract-pre
    Before loading the template/snippet file.


                                                     *brownie-extract-post*
extract-post
    After finishing extracting a template/snippet process.

                                     *brownie-source-pre* *brownie-source-post*
source-pre
source-post
    Before/After sourcing scripts. Even if the template/snippet doesn't have
    scripts, this autocmd is triggered.
    In these autocmds, |brownie-script-functions| are available.

Note that |g:brownie#info| is available while these autocmd hooks.



==============================================================================
EXAMPLES                                            *brownie-examples*

Use snippet extraction in insert mode. >
    function! s:extract_snippet() abort
      let curpos = '\%' . (col('.') - (mode() ==# 'i' ? 1 : 0)) . 'c'
      if matchstr(getline('.'), curpos . '\a') ==# ''
        call s:echomsg_warning("Any words aren't on the cursor!")
        return ''
      endif
      let begin = match(getline('.'), '\a*\ze' . curpos)
      let end = match(getline('.'), curpos . '\a*\zs\ze')
      let [pre, word] = s:strdivpos(getline('.'), begin)
      let [word, suf] = s:strdivpos(word, end - begin)
      call setline('.', pre . suf)
      call cursor(line('.'), begin + 1)
      call brownie#extract(&filetype, 'snippet', word)
      return ''
    endfunction
    nnoremap <silent> <C-k> :<C-u>call <SID>extract_snippet()<CR>
    inoremap <silent> <C-k> <C-r>=<SID>extract_snippet()<CR>
<

Make a snippet completion. >
    " Make it reloadable.
    if !exists('s:snippets')
      let s:snippets = {}
    endif
    function! CompleteSnippet(findstart, base) abort
      " Cache a snippet list.
      if !has_key(s:snippets, &filetype)
        let s:snippets[&filetype] = brownie#list(&filetype, 'snippet')
      endif
      if a:findstart
        let base = matchstr(getline('.')[: col('.') - 1],'\%(\w\|-\)\+$')
        return col('.') - strlen(base)
      else
        return filter(copy(s:snippets[&filetype]),
            \ 'stridx(v:val, a:base) == 0')
      endif
    endfunction
    set completefunc=CompleteSnippet
<
Extract template via :Template command. >
    command! -nargs=1 -complete=customlist,TemplateComplete Template
          \ call brownie#extract(s:snip_filetype(), 'template', <q-args>)
    function! TemplateComplete(arg, line, pos) abort
      return filter(
          \ brownie#list(s:snip_filetype(), 'template'),
          \ 'stridx(v:val, a:arg) == -1')
    endfunction
    function! s:snip_filetype() abort
      return getbufvar(brownie#get_current_bufnr(), '&filetype')
    endfunction
>
Clear buffer before applying template. >
    augroup brownie-template-config
      autocmd!
      autocmd User brownie-extract-pre call s:brownie_template_config()
    augroup END
    function! s:brownie_template_config() abort
      if g:brownie#info.kind ==# 'template
        silent % delete _
      endif
    endfunction
<

==============================================================================
WRITE                                            *brownie-write*

How to write your own templates/snippets.

------------------------------------------------------------------------------
File placing rule~
                                            *brownie-write-naming-rule*

/path/to/template/directory/
    - filetype/
        - template/    ......   Listed only when "template" is specificated.
        - snippet/     ......   Listed only when "snippet" is specificated.
        snippet.txt    ......   Listed always.

Example:
    ~/.vim/brownie/c
        - template/
            header.c
        - snippet/
            for.c
            if.c
            while.c

------------------------------------------------------------------------------
File contents~
                                            *brownie-write-contents*

A template/snippet file has two sections, script section and template section.
See also: |brownie-write-example|.

- script section
  This section have to be placed above template section.
  In this section, you write Vim script to modify codes in template section.
  Every line in this section have to start with ":".  If a line that doesn't
  start with ":" is found, whole lines below that line will be treated as
  template section.
  If you want to specify where the end of script section, use |:finish|
  command. By using this command, you can include ":" in template section.

  Note that this plugin write this section into a temporary file and execute
  |:source| command.

- template section
  In this section, you write template/snippet codes.
  And, `{{_cursor_}}` marker is available.  After extracting a
  template/snippet, the cursor will jump to the marker.


------------------------------------------------------------------------------
A template/snippet example~
                                            *brownie-write-example*
A snippet to insert current file's name.
>
   :call brownie#replace('FNAME', expand('%:t'))
   FNAME
<
A snippet to insert the present time.
>
   :call brownie#replace('TIME', strftime('%c'))
   TIME

A c/c++ header file with load guard template.
- If current file has name, use its uppered name as load guard.
- Otherwise, ask load guard string with |brownie#input()| and use the result
  as load guard.
>
    :let load_guard = substitute(expand('%:p:t'),'\.','_','g')
    :if load_guard ==# ''
    :  call brownie#highlight('\C\<LOADGUARD\>')
    :  let load_guard = brownie#input('Load Guard? ')
    :endif
    :call brownie#replace('\C\<LOADGUARD\>', toupper(load_guard))
    #ifndef LOADGUARD
    #define LOADGUARD

        {{_cursor_}}

    #endif //  LOADGUARD
<


==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:
