let s:scope = themis#helper('scope')
let s:funcs = s:scope.funcs('autoload/brownie.vim')
let s:vars = s:funcs.script_variables()
let g:assert = themis#helper('assert')
call themis#func_alias(s:funcs)
call themis#func_alias(s:vars.extractor)
call themis#func_alias(s:vars.viewer)
call themis#func_alias(s:vars.options_shelter)

Describe [brownie.vim]
  Before all
    function! Call(script)
      let [func, args] = split(
            \ substitute(a:script, '\s', '', 'g'),
            \ '^\_[^(]\{-}\zs\ze(')
      return call(s:funcs[func], eval('[' . args[1 : -2] . ']'))
    endfunction
    command! -nargs=+ Call call Call(<q-args>)

    function! WholeBufline()
      return getline(1, '$')
    endfunction

    let g:brownie_template_dirs = [s:vars.plugin_root . '/test/template']
  End

  After all
    delfunction Call
    delcommand Call
  End

  Describe s:let_default()
    After each
      unlet g:test
    End

    It doesn't allow to assign twice.
      Call let_default('g:test', 0)
      call g:assert.equals(g:test, 0)
      Call let_default('g:test', 1)
      call g:assert.equals(g:test, 0)
    End

    It doesn't assign when the variable is already declared.
      let g:test = 0
      Call let_default('g:test', 1)
      call g:assert.equals(g:test, 0)
    End

  End

  Describe s:use_softtab()
    After all
      set noexpandtab
    End

    It returns 1 when expandtab is enabled.
      set expandtab
      let v = s:funcs.use_softtab()
      call g:assert.equals(v, 1)
    End

    It returns 0 when expandtab is disabled.
      set noexpandtab
      let v = s:funcs.use_softtab()
      call g:assert.equals(v, 0)
    End
  End

  Describe s:str_divide_pos()
    It separates string with provided the position.
      let s = 'hogefuga'
      let r = s:funcs.str_divide_pos(s, strlen('hoge'))
      call g:assert.equals(r, ['hoge', 'fuga'])
    End

    It can separate string even if 0 is provided as the position.
      let s = 'hoge'
      let r = s:funcs.str_divide_pos(s, 0)
      call g:assert.equals(r, ['', s])
    End

    It can separate string even if length of string is provided as the position.
      let s = 'hoge'
      let r = s:funcs.str_divide_pos(s, strlen(s))
      call g:assert.equals(r, [s, ''])
    End
  End

  Describe brownie#is_buffer_empty()
    It returns true when buffer is empty.
      silent % delete _
      call g:assert.equals(brownie#is_buffer_empty(), 1)
    End

    It returns false when buffer is not empty.
      call setline(1, 'hoge')
      call g:assert.equals(brownie#is_buffer_empty(), 0)
    End

    Context from another buffer
      Before all
      End
      After all
        % bwipeout!
      End
      It returns true when buffer is empty.
        silent % delete _
        let bufnr = bufnr('%')
        new
        call setline(1, 'hoge')
        call g:assert.equals(brownie#is_buffer_empty(bufnr), 1)
      End

      It returns false when buffer is not empty.
        call setline(1, 'hoge')
        let bufnr = bufnr('%')
        new
        call setline(1, 'fuga')
        call g:assert.equals(brownie#is_buffer_empty(bufnr), 0)
      End
    End
  End

  Describe brownie#list()
    Before all
      function List(filetype, kind) abort
        return sort(brownie#list(a:kind))
      endfunction
    End
    After all
      delfunction List
    End
    It lists templates.
      call g:assert.equals(brownie#list('list', 'template'),
            \ sort(['always', 'template', 'always-always', 'always-template']))
    End
    It lists snippets.
      call g:assert.equals(brownie#list('list', 'snippet'),
            \ sort(['always', 'snippet', 'always-always', 'always-snippet']))
    End
    It can list templates even when filetype is empty.
      call g:assert.equals(brownie#list('', 'template'),
            \ sort(['always-always', 'always-template']))
    End
    It can list snippets even when filetype is empty.
      call g:assert.equals(brownie#list('', 'snippet'),
            \ sort(['always-always', 'always-snippet']))
    End
  End

  Describe brownie#extract()
    After all
      delfunction Extract
    End

    Before each
      silent % delete _
    End

    Context <template>
      Before all
        function! Extract(name) abort
          return brownie#extract('extract', 'template', a:name)
        endfunction
      End

      It extracts a template - oneline
        call Extract('oneline')
        call g:assert.equals(WholeBufline(), ['template'])
      End

      It extracts a template - multiline
        call Extract('multiline')
        call g:assert.equals(WholeBufline(), ['template', 'template'])
      End

      It extracts a template - replace
        call Extract('replace')
        call g:assert.equals(WholeBufline(), ['replaced'])
      End

      It extracts a template - cursor1
        call Extract('cursor1')
        call g:assert.equals(line('.'), 2)
        call g:assert.equals(WholeBufline(), ['template', '', 'template'])
      End

      It extracts a template - cursor2
        call Extract('cursor2')
        call g:assert.equals(getline('.'), 'cursor_line')
      End

      It extracts a template - cursor3
        call Extract('cursor3')
        call g:assert.equals(getline('.'), 'cursor_line')
      End

      It extracts a template - cursor4
        call Extract('cursor4')
        call g:assert.equals(getline('.'), 'cursor_line')
      End

      It extracts a template - command
        let g:test_msg = ''
        call Extract('command')
        call g:assert.equals(g:test_msg, 'executed')
      End

      It extracts a template with softtab - indent
        set expandtab shiftwidth=2
        call Extract('indent')
        call g:assert.equals(WholeBufline(), ['  indent'])
        set noexpandtab
      End

      Context check autocmds
        Before all
          augroup test_brownie
            autocmd!
            autocmd User brownie-extract-pre  call add(s:log, 'extract-pre')
            autocmd User brownie-source-pre   call add(s:log, 'source-pre')
            autocmd User brownie-source-post  call add(s:log, 'source-post')
            autocmd User brownie-extract-post call add(s:log, 'extract-post')
          augroup END

          function CheckLog()
            call g:assert.equals(s:log,
                  \ ['extract-pre', 'source-pre', 'source-post', 'extract-post'])
          endfunction
        End

        Before each
          let s:log = []
        End

        It triggers autocmds - no script section
          call Extract('oneline')
          call CheckLog()
        End

        It triggers autocmds - script section
          call Extract('command')
          call CheckLog()
        End

        After all
          augroup test_brownie
            autocmd!
          augroup END
          delfunc CheckLog
        End
      End
    End

    Context <snippet>
      Context in normal-mode
        Before all
          function! Extract(name) abort
            return brownie#extract('extract', 'snippet', a:name)
          endfunction
        End

        It extracts a snippet - oneline
          call Extract('oneline')
          call g:assert.equals(WholeBufline(), ['snippet'])
        End

        It extracts a snippet with default text - oneline
          call setline(1, 'default--text')
          normal! f-
          call Extract('oneline')
          call g:assert.equals(getline('.'), 'default-snippet-text')
        End

        It extracts a snippet - multiline
          call Extract('multiline')
          call g:assert.equals(WholeBufline(), ['snippet', 'snippet'])
        End

        It extracts a snippet with default text - multiline
          call setline(1, 'default--text')
          normal! f-
          call Extract('multiline')
          call g:assert.equals(WholeBufline(), ['default-snippet', 'snippet-text'])
        End

        It extracts a snippet with indentations - multiline
          call setline(1, "\t")
          normal! $
          call Extract('multiline')
          call g:assert.equals(WholeBufline(), ["\tsnippet", "\tsnippet"])
        End

        It extracts a snippet - command
          let g:test_msg = ''
          call Extract('command')
          call g:assert.equals(g:test_msg, 'executed')
        End

        It extracts a snippet - cursor1
          call Extract('cursor1')
          call g:assert.equals(line('.'), 2)
          call g:assert.equals(WholeBufline(), ['snippet', '', 'snippet'])
        End

        It extracts a snippet - cursor2
          call Extract('cursor2')
          call g:assert.equals(WholeBufline(), ['snippet', 'cursor_line', 'snippet'])
        End

        It extracts a snippet - cursor3
          call Extract('cursor3')
          call g:assert.equals(WholeBufline(), ['snippet', 'cursor_line', 'snippet'])
        End

        It extracts a snippet - cursor4
          call Extract('cursor4')
          call g:assert.equals(WholeBufline(), ['snippet', 'cursor_line', 'snippet'])
        End

        It extracts a snippet - replace
          call Extract('replace')
          call g:assert.equals(getline('.'), 'snippet')
        End

        It extracts a template with softtab - indent
          set expandtab shiftwidth=2
          call Extract('indent')
          call g:assert.equals(WholeBufline(), ['  indent'])
          set expandtab& shiftwidth&
        End
      End

      Context in insert-mode
        Before all
          function! Extract(name) abort
            startinsert!
            return brownie#extract('extract', 'snippet', a:name)
            stopinsert
          endfunction
        End

        It extracts a snippet - multiline
          call Extract('multiline')
          call g:assert.equals(WholeBufline(), ['snippet', 'snippet'])
        End

        It extracts a snippet with indentations - multiline
          call setline(1, "\t")
          call Extract('multiline')
          call g:assert.equals(WholeBufline(), ["\tsnippet", "\tsnippet"])
        End

        It extracts a snippet - cursor1
          call Extract('cursor1')
          call g:assert.equals(line('.'), 2)
          call g:assert.equals(WholeBufline(), ['snippet', '', 'snippet'])
        End

        It extracts a snippet - cursor2
          call Extract('cursor2')
          call g:assert.equals(WholeBufline(), ['snippet', 'cursor_line', 'snippet'])
        End

        It extracts a snippet - cursor3
          call Extract('cursor3')
          call g:assert.equals(WholeBufline(), ['snippet', 'cursor_line', 'snippet'])
        End

        It extracts a snippet - cursor4
          call Extract('cursor4')
          call g:assert.equals(WholeBufline(), ['snippet', 'cursor_line', 'snippet'])
        End

        It extracts a snippet - replace
          call Extract('replace')
          call g:assert.equals(getline('.'), 'snippet')
        End

        It extracts a template with softtab - indent
          set expandtab shiftwidth=2
          call Extract('indent')
          call g:assert.equals(WholeBufline(), ['  indent'])
          set expandtab& shiftwidth&
        End
      End
    End
  End
End
